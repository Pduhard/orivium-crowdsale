{
  "address": "0xba97239c003E1d46BB083980C6bFBb3Ffb6Dd94D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "_phaseRates",
          "type": "uint256[3]"
        },
        {
          "internalType": "address",
          "name": "_usdt",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_fundsCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vesting",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ethPriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdtPriceFeed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxBuyableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBuyableAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "purchaser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "currency",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "sponsorKey",
          "type": "string"
        }
      ],
      "name": "TokenPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "CROWDSALE_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "sponsorKey",
          "type": "string"
        }
      ],
      "name": "buyTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "weiAmount",
          "type": "uint256"
        }
      ],
      "name": "buyTokensWithUSDT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "weiAmount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "sponsorKey",
          "type": "string"
        }
      ],
      "name": "buyTokensWithUSDT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundsCollector",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "getBuyableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "weiAmount",
          "type": "uint256"
        }
      ],
      "name": "getETHPriceFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinimumBuyableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "weiAmount",
          "type": "uint256"
        }
      ],
      "name": "getORIAmountForETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "weiAmount",
          "type": "uint256"
        }
      ],
      "name": "getORIAmountForUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "weiAmount",
          "type": "uint256"
        }
      ],
      "name": "getORIAmountForUSDT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "weiAmount",
          "type": "uint256"
        }
      ],
      "name": "getUSDPriceFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "weiAmount",
          "type": "uint256"
        }
      ],
      "name": "getUSDTPriceFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBuyableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBuyableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "phaseIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "phases",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vesting",
      "outputs": [
        {
          "internalType": "contract Vesting",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x19db2adf8cdad3f41e7e324e1d1bd7d3c421849f9221aa585ac559138a9dbe44",
  "receipt": {
    "to": null,
    "from": "0x935967faD7ebE3E686cf3d835dEfEBA6B5a70CdC",
    "contractAddress": "0xba97239c003E1d46BB083980C6bFBb3Ffb6Dd94D",
    "transactionIndex": 123,
    "gasUsed": "2571819",
    "logsBloom": "0x
    "blockHash": "0x5b5f4731ad5b2c140d8a2cc266c30b5e4632a4beba59f32ed4c468cfe3cba1d9",
    "transactionHash": "0x19db2adf8cdad3f41e7e324e1d1bd7d3c421849f9221aa585ac559138a9dbe44",
    "logs": [
      {
        "transactionIndex": 123,
        "blockNumber": 17868743,
        "transactionHash": "0x19db2adf8cdad3f41e7e324e1d1bd7d3c421849f9221aa585ac559138a9dbe44",
        "address": "0xba97239c003E1d46BB083980C6bFBb3Ffb6Dd94D",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000935967fad7ebe3e686cf3d835defeba6b5a70cdc",
          "0x000000000000000000000000935967fad7ebe3e686cf3d835defeba6b5a70cdc"
        ],
        "data": "0x",
        "logIndex": 315,
        "blockHash": "0x5b5f4731ad5b2c140d8a2cc266c30b5e4632a4beba59f32ed4c468cfe3cba1d9"
      }
    ],
    "blockNumber": 17868743,
    "cumulativeGasUsed": "15498339",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "100000000000",
      "62500000000",
      "31250000000"
    ],
    "0xdAC17F958D2ee523a2206206994597C13D831ec7",
    "0xf310366666882274F2bF184F9Ab790906142fF9B",
    "0x6B468BfC7104a2d16EF7C7DEd7e579f7d8bd3b5e",
    "0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419",
    "0x3E7d1eAB13ad0104d2750B8863b489D65364e32D",
    "500000000000",
    "10000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "1dd4cf646caeba09b7d208d4269dcb69",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"_phaseRates\",\"type\":\"uint256[3]\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_fundsCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vesting\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtPriceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxBuyableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBuyableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sponsorKey\",\"type\":\"string\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CROWDSALE_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"sponsorKey\",\"type\":\"string\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensWithUSDT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"sponsorKey\",\"type\":\"string\"}],\"name\":\"buyTokensWithUSDT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsCollector\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getBuyableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"getETHPriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumBuyableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"getORIAmountForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"getORIAmountForUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"getORIAmountForUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"getUSDPriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"getUSDTPriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuyableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vesting\",\"outputs\":[{\"internalType\":\"contract Vesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"TokenPurchased(address,uint256,uint256,string,string)\":{\"params\":{\"amount\":\"amount of tokens purchased\",\"currency\":\"currency used to process purchase\",\"purchaser\":\"who paid for the tokens\",\"sponsorKey\":\"sponsor key (grant advantages on orivium nfts)\",\"value\":\"weis paid for purchase\"}}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"Orivium Token Crowdsale\",\"version\":1},\"userdoc\":{\"events\":{\"TokenPurchased(address,uint256,uint256,string,string)\":{\"notice\":\"Event for token purchase logging\"}},\"kind\":\"user\",\"methods\":{\"CROWDSALE_ADMIN_ROLE()\":{\"notice\":\"Role CROWDSALE_ADMIN_ROLE allows to step into next phase\"},\"PAUSER_ROLE()\":{\"notice\":\"Role PAUSER_ROLE allows to pause and unpause crowdsale\"},\"buyTokens(string)\":{\"notice\":\"buy orivium token with ETHThis function has a non-reentrancy guard, so it shouldn't be called by \\t\\tanother `nonReentrant` function.\"},\"buyTokensWithUSDT(uint256,string)\":{\"notice\":\"buy orivium token with USDTThis function has a non-reentrancy guard, so it shouldn't be called by \\t\\tanother `nonReentrant` function.\"},\"fundsCollector()\":{\"notice\":\"funds collector wallet address\"},\"getBuyableAmount(address)\":{\"notice\":\"get remaining buyable amount for given addres on current phase\"},\"getETHPriceFor(uint256)\":{\"notice\":\"get ETH price for given wei amount in ORI\"},\"getMinimumBuyableAmount()\":{\"notice\":\"get minimal amount to buy\"},\"getORIAmountForETH(uint256)\":{\"notice\":\"get ORI amount for given ETH wei amount\"},\"getORIAmountForUSD(uint256)\":{\"notice\":\"get ORI amount for given USD wei amount\"},\"getORIAmountForUSDT(uint256)\":{\"notice\":\"get ORI amount for given USDT wei amount\"},\"getUSDPriceFor(uint256)\":{\"notice\":\"get ETH price for given wei amount in USD\"},\"getUSDTPriceFor(uint256)\":{\"notice\":\"get ETH price for given wei amount in USDT\"},\"maxBuyableAmount()\":{\"notice\":\"maximum buyable amount by wallet by phase\"},\"minBuyableAmount()\":{\"notice\":\"minimum buyable amount by wallet by phase\"},\"pause()\":{\"notice\":\"pause crowdsale\"},\"phaseIndex()\":{\"notice\":\"Index of the current phase\"},\"phases(uint256)\":{\"notice\":\"array containing information about crowdsale phases\"},\"rate()\":{\"notice\":\"get current USD/ORI conversion rate\"},\"unpause()\":{\"notice\":\"unpause crowdsale\"},\"updateRate()\":{\"notice\":\"step into next phase\"},\"usdt()\":{\"notice\":\"usdt token address\"},\"vesting()\":{\"notice\":\"orivium token vesting contract address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sales/CrowdsaleL1.sol\":\"CrowdsaleL1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/sales/CrowdsaleL1.sol\":{\"content\":\"// contracts/sales/Crowdsale.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { AccessControlEnumerable } from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport { Vesting } from \\\"./Vesting.sol\\\";\\n\\n/**\\n * @title Orivium Token Crowdsale\\n */\\ncontract CrowdsaleL1 is\\n\\tContext,\\n\\tReentrancyGuard,\\n\\tAccessControlEnumerable,\\n\\tPausable\\n{\\n\\tusing SafeERC20 for ERC20;\\n\\n\\t/**\\n\\t * @notice Role PAUSER_ROLE allows to pause and unpause crowdsale\\n\\t */\\n\\tbytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n\\t/**\\n\\t * @notice Role CROWDSALE_ADMIN_ROLE allows to step into next phase\\n\\t */\\n\\tbytes32 public constant CROWDSALE_ADMIN_ROLE =\\n\\t\\tkeccak256(\\\"CROWDSALE_ADMIN_ROLE\\\");\\n\\n\\tAggregatorV3Interface internal immutable ethPriceFeed;\\n\\tAggregatorV3Interface internal immutable usdtPriceFeed;\\n\\n\\t/**\\n\\t * @notice usdt token address\\n\\t */\\n\\tERC20 public immutable usdt;\\n\\n\\t/**\\n\\t * @notice funds collector wallet address\\n\\t */\\n\\taddress payable public immutable fundsCollector;\\n\\n\\t/**\\n\\t * @notice maximum buyable amount by wallet by phase\\n\\t */\\n\\tuint256 public immutable maxBuyableAmount;\\n\\n\\t/**\\n\\t * @notice minimum buyable amount by wallet by phase\\n\\t */\\n\\tuint256 public immutable minBuyableAmount;\\n\\n\\t/**\\n\\t * @notice phase structure contains:\\n\\t * \\t\\t- rate used to compute ori price\\n\\t * \\t\\t- bought amount by wallet\\n\\t */\\n\\tstruct Phase {\\n\\t\\t/**\\n\\t\\t * @notice rate used to compute ori price\\n\\t\\t */\\n\\t\\tuint rate;\\n\\t\\t/**\\n\\t\\t * @notice bought amount by wallet\\n\\t\\t */\\n\\t\\tmapping(address => uint) boughtAmounts;\\n\\t}\\n\\n\\t/**\\n\\t * @notice array containing information about crowdsale phases\\n\\t */\\n\\tPhase[3] public phases;\\n\\n\\t/**\\n\\t * @notice Index of the current phase\\n\\t */\\n\\tuint public phaseIndex;\\n\\n\\t/**\\n\\t * @notice orivium token vesting contract address\\n\\t */\\n\\tVesting public immutable vesting;\\n\\n\\t/**\\n\\t * Event for token purchase logging\\n\\t * @param purchaser who paid for the tokens\\n\\t * @param value weis paid for purchase\\n\\t * @param amount amount of tokens purchased\\n\\t * @param currency currency used to process purchase\\n\\t * @param sponsorKey sponsor key (grant advantages on orivium nfts)\\n\\t */\\n\\tevent TokenPurchased(\\n\\t\\taddress indexed purchaser,\\n\\t\\tuint value,\\n\\t\\tuint amount,\\n\\t\\tstring currency,\\n\\t\\tstring sponsorKey\\n\\t);\\n\\n\\tconstructor(\\n\\t\\tuint[3] memory _phaseRates,\\n\\t\\taddress _usdt,\\n\\t\\taddress payable _fundsCollector,\\n\\t\\taddress _vesting,\\n\\t\\taddress _ethPriceFeed,\\n\\t\\taddress _usdtPriceFeed,\\n\\t\\tuint _maxBuyableAmount,\\n\\t\\tuint _minBuyableAmount\\n\\t) Pausable() {\\n\\t\\trequire(\\n\\t\\t\\t_fundsCollector != address(0),\\n\\t\\t\\t\\\"Crowdsale: funds collector is the zero address\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_usdt != address(0),\\n\\t\\t\\t\\\"Crowdsale: usdt token is the zero address\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_vesting != address(0),\\n\\t\\t\\t\\\"Crowdsale: vesting is the zero address\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_ethPriceFeed != address(0),\\n\\t\\t\\t\\\"Crowdsale: eth price feed is the zero address\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_usdtPriceFeed != address(0),\\n\\t\\t\\t\\\"Crowdsale: usdt price feed is the zero address\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_maxBuyableAmount > _minBuyableAmount,\\n\\t\\t\\t\\\"Crowdsale: max buyable amount is lower than min buyable amount\\\"\\n\\t\\t);\\n\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\t\\tfor (uint i = 0; i < _phaseRates.length; i++) {\\n\\t\\t\\tphases[i].rate = _phaseRates[i];\\n\\t\\t}\\n\\t\\tphaseIndex = 0;\\n\\t\\tfundsCollector = _fundsCollector;\\n\\t\\tusdt = ERC20(_usdt);\\n\\t\\tvesting = Vesting(_vesting);\\n\\t\\tethPriceFeed = AggregatorV3Interface(_ethPriceFeed);\\n\\t\\tusdtPriceFeed = AggregatorV3Interface(_usdtPriceFeed);\\n\\t\\tmaxBuyableAmount = _maxBuyableAmount;\\n\\t\\tminBuyableAmount = _minBuyableAmount;\\n\\t}\\n\\n\\t/**\\n\\t * @dev fallback function. Consider calling\\n\\t * \\t\\tbuyTokens directly when purchasing tokens from a contract.\\n\\t */\\n\\treceive() external payable {\\n\\t\\tbuyTokens();\\n\\t}\\n\\n\\tfallback() external payable {\\n\\t\\tbuyTokens();\\n\\t}\\n\\n\\tfunction buyTokens() public payable {\\n\\t\\treturn buyTokens(\\\"0000000000\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @notice buy orivium token with ETH\\n\\t *\\n\\t * @notice This function has a non-reentrancy guard, so it shouldn't be called by\\n\\t * \\t\\tanother `nonReentrant` function.\\n\\t */\\n\\tfunction buyTokens(\\n\\t\\tstring memory sponsorKey\\n\\t) public payable nonReentrant whenNotPaused {\\n\\t\\tuint weiAmount = msg.value;\\n\\t\\taddress beneficiary = _msgSender();\\n\\n\\t\\trequire(weiAmount != 0, \\\"Crowdsale: weiAmount is 0\\\");\\n\\t\\trequire(\\n\\t\\t\\tbytes(sponsorKey).length == 10,\\n\\t\\t\\t\\\"Crowdsale: bad sponsorKey format, it should contain 10 characters\\\"\\n\\t\\t);\\n\\n\\t\\tuint tokenAmount = getORIAmountForETH(weiAmount);\\n\\t\\trequire(\\n\\t\\t\\ttokenAmount >= getMinimumBuyableAmount(),\\n\\t\\t\\t\\\"Crowdsale: subceed minimum amount of token buyable for this phase\\\"\\n\\t\\t);\\n\\n\\t\\tuint buyableAmount = getBuyableAmount(beneficiary);\\n\\t\\trequire(\\n\\t\\t\\tbuyableAmount >= tokenAmount,\\n\\t\\t\\t\\\"Crowdsale: exceed maximum amount of token buyable for this phase\\\"\\n\\t\\t);\\n\\t\\t_currentPhase().boughtAmounts[beneficiary] += tokenAmount;\\n\\n\\t\\temit TokenPurchased(\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\tweiAmount,\\n\\t\\t\\ttokenAmount,\\n\\t\\t\\t\\\"ETH\\\",\\n\\t\\t\\tsponsorKey\\n\\t\\t);\\n\\n\\t\\t_vestToken(beneficiary, tokenAmount);\\n\\n\\t\\tfundsCollector.transfer(weiAmount);\\n\\t}\\n\\n\\tfunction buyTokensWithUSDT(uint weiAmount) public payable {\\n\\t\\treturn buyTokensWithUSDT(weiAmount, \\\"0000000000\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @notice buy orivium token with USDT\\n\\t *\\n\\t * @notice This function has a non-reentrancy guard, so it shouldn't be called by\\n\\t * \\t\\tanother `nonReentrant` function.\\n\\t */\\n\\tfunction buyTokensWithUSDT(\\n\\t\\tuint weiAmount,\\n\\t\\tstring memory sponsorKey\\n\\t) public payable nonReentrant whenNotPaused {\\n\\t\\taddress beneficiary = _msgSender();\\n\\n\\t\\trequire(weiAmount != 0, \\\"Crowdsale: weiAmount is 0\\\");\\n\\t\\trequire(\\n\\t\\t\\tbytes(sponsorKey).length == 10,\\n\\t\\t\\t\\\"Crowdsale: bad sponsorKey format, it should contain 10 characters\\\"\\n\\t\\t);\\n\\n\\t\\tuint tokenAmount = getORIAmountForUSDT(weiAmount);\\n\\t\\trequire(\\n\\t\\t\\ttokenAmount >= getMinimumBuyableAmount(),\\n\\t\\t\\t\\\"Crowdsale: subceed minimum amount of token buyable for this phase\\\"\\n\\t\\t);\\n\\n\\t\\tuint buyableAmount = getBuyableAmount(beneficiary);\\n\\t\\trequire(\\n\\t\\t\\tbuyableAmount >= tokenAmount,\\n\\t\\t\\t\\\"Crowdsale: exceed maximum amount of token buyable for this phase\\\"\\n\\t\\t);\\n\\t\\t_currentPhase().boughtAmounts[beneficiary] += tokenAmount;\\n\\n\\t\\temit TokenPurchased(\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\tweiAmount,\\n\\t\\t\\ttokenAmount,\\n\\t\\t\\t\\\"USDT\\\",\\n\\t\\t\\tsponsorKey\\n\\t\\t);\\n\\n\\t\\t_vestToken(beneficiary, tokenAmount);\\n\\n\\t\\tusdt.safeTransferFrom(_msgSender(), fundsCollector, weiAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice get remaining buyable amount for given addres on current phase\\n\\t */\\n\\tfunction getBuyableAmount(address beneficiary) public view returns (uint) {\\n\\t\\tPhase storage phase = _currentPhase();\\n\\t\\treturn\\n\\t\\t\\tgetORIAmountForUSD(maxBuyableAmount) -\\n\\t\\t\\tphase.boughtAmounts[beneficiary];\\n\\t}\\n\\n\\t/**\\n\\t * @notice get minimal amount to buy\\n\\t */\\n\\tfunction getMinimumBuyableAmount() public view returns (uint) {\\n\\t\\treturn getORIAmountForUSD(minBuyableAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice get ETH price for given wei amount in ORI\\n\\t */\\n\\tfunction getETHPriceFor(uint weiAmount) public view returns (uint) {\\n\\t\\tuint weiUsdByEth = _getLatestETHPriceFeed();\\n\\t\\tuint usdPrice = getUSDPriceFor(weiAmount);\\n\\t\\treturn (usdPrice * (10 ** 18)) / weiUsdByEth;\\n\\t}\\n\\n\\t/**\\n\\t * @notice get ORI amount for given ETH wei amount\\n\\t */\\n\\tfunction getORIAmountForETH(uint weiAmount) public view returns (uint) {\\n\\t\\tuint weiUsdByEth = _getLatestETHPriceFeed();\\n\\t\\tuint usdPrice = (weiAmount * weiUsdByEth) / (10 ** 18);\\n\\t\\treturn getORIAmountForUSD(usdPrice);\\n\\t}\\n\\n\\t/**\\n\\t * @notice get ETH price for given wei amount in USDT\\n\\t */\\n\\tfunction getUSDTPriceFor(uint weiAmount) public view returns (uint) {\\n\\t\\tuint weiUsdByUsdt = _getLatestUSDTPriceFeed();\\n\\t\\tuint usdPrice = getUSDPriceFor(weiAmount);\\n\\t\\treturn (usdPrice * (10 ** usdt.decimals())) / weiUsdByUsdt;\\n\\t}\\n\\n\\t/**\\n\\t * @notice get ORI amount for given USDT wei amount\\n\\t */\\n\\tfunction getORIAmountForUSDT(uint weiAmount) public view returns (uint) {\\n\\t\\tuint weiUsdByUsdt = _getLatestUSDTPriceFeed();\\n\\t\\tuint usdPrice = (weiAmount * weiUsdByUsdt) / (10 ** usdt.decimals());\\n\\t\\treturn getORIAmountForUSD(usdPrice);\\n\\t}\\n\\n\\t/**\\n\\t * @notice get ETH price for given wei amount in USD\\n\\t */\\n\\tfunction getUSDPriceFor(uint weiAmount) public view returns (uint) {\\n\\t\\treturn weiAmount / rate();\\n\\t}\\n\\n\\t/**\\n\\t * @notice get ORI amount for given USD wei amount\\n\\t */\\n\\tfunction getORIAmountForUSD(uint weiAmount) public view returns (uint) {\\n\\t\\treturn weiAmount * rate();\\n\\t}\\n\\n\\t/**\\n\\t * @notice step into next phase\\n\\t */\\n\\tfunction updateRate() external onlyRole(CROWDSALE_ADMIN_ROLE) {\\n\\t\\trequire(phaseIndex < 2, \\\"Crowdsale: cannot exceed phase 3\\\");\\n\\t\\tphaseIndex = phaseIndex + 1;\\n\\t}\\n\\n\\t/**\\n\\t * @notice pause crowdsale\\n\\t */\\n\\tfunction pause() external onlyRole(PAUSER_ROLE) {\\n\\t\\t_pause();\\n\\t}\\n\\n\\t/**\\n\\t * @notice unpause crowdsale\\n\\t */\\n\\tfunction unpause() external onlyRole(PAUSER_ROLE) {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\t/**\\n\\t * @notice get current USD/ORI conversion rate\\n\\t */\\n\\tfunction rate() public view returns (uint) {\\n\\t\\treturn _currentPhase().rate;\\n\\t}\\n\\n\\tfunction _vestToken(address beneficiary, uint tokenAmount) internal {\\n\\t\\tvesting.vest(beneficiary, tokenAmount);\\n\\t}\\n\\n\\tfunction _currentPhase() internal view returns (Phase storage) {\\n\\t\\treturn phases[phaseIndex];\\n\\t}\\n\\n\\tfunction _getLatestETHPriceFeed() internal view returns (uint) {\\n\\t\\treturn _getLatestPriceFeed(ethPriceFeed);\\n\\t}\\n\\n\\tfunction _getLatestUSDTPriceFeed() internal view returns (uint) {\\n\\t\\treturn _getLatestPriceFeed(usdtPriceFeed);\\n\\t}\\n\\n\\tfunction _getLatestPriceFeed(\\n\\t\\tAggregatorV3Interface priceFeed\\n\\t) internal view returns (uint) {\\n\\t\\t(, int answer, , , ) = priceFeed.latestRoundData();\\n\\t\\treturn uint(answer);\\n\\t}\\n}\\n\",\"keccak256\":\"0x90372a24db015e99932afcfc03ea15d866af5374dc7e35bbba382162a4038c2f\",\"license\":\"MIT\"},\"contracts/sales/Vesting.sol\":{\"content\":\"// contracts/sales/Vesting.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { AccessControlEnumerable } from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Orivium vesting contract for crowdsale\\n *\\n * @notice once purchased on crowdsale, this contrat is responsible to deliver token to purchaser\\n * \\t\\ttoken will be available to claim as follow: 10% at vesting start timestamp then 2% each week\\n */\\ncontract Vesting is AccessControlEnumerable, ReentrancyGuard {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/**\\n\\t * @notice Role VESTING_ROLE allows to vest token for a beneficiary\\n\\t */\\n\\tbytes32 public constant VESTING_ROLE = keccak256(\\\"VESTING_ROLE\\\");\\n\\n\\t/**\\n\\t * @notice Role VESTING_ADMIN_ROLE allows to set ori token address and vesting start timestamp\\n\\t */\\n\\tbytes32 public constant VESTING_ADMIN_ROLE =\\n\\t\\tkeccak256(\\\"VESTING_ADMIN_ROLE\\\");\\n\\n\\t/**\\n\\t * @notice percentil of token releasable at vesting start timestamp\\n\\t */\\n\\tuint256 public constant CLIFFING_PERCENT = 10;\\n\\n\\t/**\\n\\t * @notice Vesting duration in seconds\\n\\t */\\n\\tuint256 public constant VESTING_DURATION = 60 * 60 * 24 * 7 * (90 / 2);\\n\\n\\t/**\\n\\t * @notice vesting start timestamp\\n\\t * \\t\\tdefault to 2024, this will be changed to token release date\\n\\t */\\n\\tuint256 public vestingStart = 1704063600;\\n\\n\\t/**\\n\\t * @notice orivium token address\\n\\t */\\n\\taddress public oriTokenAddress = address(0);\\n\\n\\t/**\\n\\t * @notice mapping to associate wallet address to vesting acount\\n\\t */\\n\\tmapping(address => VestingAccount) private accounts;\\n\\n\\tstruct VestingAccount {\\n\\t\\t/**\\n\\t\\t * @notice amount of token vested\\n\\t\\t */\\n\\t\\tuint128 amount;\\n\\t\\t/**\\n\\t\\t * @notice amount of token already released\\n\\t\\t */\\n\\t\\tuint128 released;\\n\\t}\\n\\n\\t/**\\n\\t * Event for token released logging\\n\\t * @param beneficiary who receive the token\\n\\t * @param amount amount of tokens received\\n\\t */\\n\\tevent TokenReleased(address indexed beneficiary, uint amount);\\n\\n\\tconstructor() {\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\t}\\n\\n\\t/**\\n\\t * @notice vest amount of token to a beneficiary\\n\\t */\\n\\tfunction vest(\\n\\t\\taddress _beneficiary,\\n\\t\\tuint256 _tokenAmount\\n\\t) public onlyRole(VESTING_ROLE) {\\n\\t\\taccounts[_beneficiary].amount += uint128(_tokenAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice get vesting account from beneficiary addres\\n\\t */\\n\\tfunction getAccount(\\n\\t\\taddress _beneficiary\\n\\t) public view returns (VestingAccount memory) {\\n\\t\\treturn accounts[_beneficiary];\\n\\t}\\n\\n\\t/**\\n\\t * @notice release token to beneficiary\\n\\t */\\n\\tfunction release(address _beneficiary) public nonReentrant {\\n\\t\\trequire(\\n\\t\\t\\t_beneficiary != address(0),\\n\\t\\t\\t\\\"Vesting: beneficiary is zero address\\\"\\n\\t\\t);\\n\\t\\tIERC20 token = IERC20(oriTokenAddress);\\n\\t\\tuint256 releasableAmount = getReleasableAmount(_beneficiary);\\n\\t\\trequire(releasableAmount > 0, \\\"Vesting: releasble amount is null\\\");\\n\\t\\taccounts[_beneficiary].released += uint128(releasableAmount);\\n\\n\\t\\temit TokenReleased(_beneficiary, releasableAmount);\\n\\n\\t\\ttoken.safeTransfer(_beneficiary, releasableAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice get releasable amount of token for a beneficiary\\n\\t */\\n\\tfunction getReleasableAmount(\\n\\t\\taddress _beneficiary\\n\\t) public view returns (uint256) {\\n\\t\\tVestingAccount memory account = accounts[_beneficiary];\\n\\t\\treturn _releasable(account);\\n\\t}\\n\\n\\t/**\\n\\t * @notice set ori token address\\n\\t */\\n\\tfunction setOriTokenAddress(\\n\\t\\taddress _oriTokenAddress\\n\\t) external onlyRole(VESTING_ADMIN_ROLE) {\\n\\t\\trequire(\\n\\t\\t\\t_oriTokenAddress != address(0),\\n\\t\\t\\t\\\"Crowdsale: cannot set ori token address to zero address\\\"\\n\\t\\t);\\n\\t\\toriTokenAddress = _oriTokenAddress;\\n\\t}\\n\\n\\tfunction setVestingStart(\\n\\t\\tuint256 _vestingStart\\n\\t) external onlyRole(VESTING_ADMIN_ROLE) {\\n\\t\\tvestingStart = _vestingStart;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Used to cancel tx in case of exceeding total amount of token during crowdsale,\\n\\t * the fund used to purchase ori will be refund manually\\n\\t *\\n\\t * @param _beneficiary - address to refund\\n\\t * @param _amountToDecrease - amount set manually (downgrade by the exceeding amount)\\n\\t */\\n\\tfunction decreaseAmount(\\n\\t\\taddress _beneficiary,\\n\\t\\tuint128 _amountToDecrease\\n\\t) external onlyRole(VESTING_ROLE) {\\n\\t\\trequire(\\n\\t\\t\\taccounts[_beneficiary].amount >= _amountToDecrease,\\n\\t\\t\\t\\\"Vesting: amount to decrease is greater than account amount\\\"\\n\\t\\t);\\n\\t\\taccounts[_beneficiary].amount -= _amountToDecrease;\\n\\t}\\n\\n\\tfunction _releasable(\\n\\t\\tVestingAccount memory _account\\n\\t) internal view returns (uint256) {\\n\\t\\tif (block.timestamp < vestingStart) return 0;\\n\\t\\tuint256 cliffingAmount = _getCliffingAmount(_account.amount);\\n\\t\\tuint256 vestingAmount = _getVestingAmount(\\n\\t\\t\\t_account.amount - cliffingAmount\\n\\t\\t);\\n\\t\\treturn cliffingAmount + vestingAmount - _account.released;\\n\\t}\\n\\n\\tfunction _getCliffingAmount(\\n\\t\\tuint256 _tokenAmount\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn (_tokenAmount * CLIFFING_PERCENT) / 100;\\n\\t}\\n\\n\\tfunction _getVestingAmount(\\n\\t\\tuint256 _tokenAmount\\n\\t) internal view returns (uint256) {\\n\\t\\tif (block.timestamp >= vestingStart + VESTING_DURATION) {\\n\\t\\t\\treturn _tokenAmount;\\n\\t\\t}\\n\\t\\treturn\\n\\t\\t\\t(_tokenAmount * (block.timestamp - vestingStart)) /\\n\\t\\t\\tVESTING_DURATION;\\n\\t}\\n}\\n\",\"keccak256\":\"0x78984174bba68a86fca7577e607b99af868436d171a45553c7e232f853e00222\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620030bc380380620030bc8339810160408190526200003591620004ed565b60016000556003805460ff191690556001600160a01b038616620000b75760405162461bcd60e51b815260206004820152602e60248201527f43726f776473616c653a2066756e647320636f6c6c6563746f7220697320746860448201526d65207a65726f206164647265737360901b60648201526084015b60405180910390fd5b6001600160a01b038716620001215760405162461bcd60e51b815260206004820152602960248201527f43726f776473616c653a207573647420746f6b656e20697320746865207a65726044820152686f206164647265737360b81b6064820152608401620000ae565b6001600160a01b038516620001885760405162461bcd60e51b815260206004820152602660248201527f43726f776473616c653a2076657374696e6720697320746865207a65726f206160448201526564647265737360d01b6064820152608401620000ae565b6001600160a01b038416620001f65760405162461bcd60e51b815260206004820152602d60248201527f43726f776473616c653a2065746820707269636520666565642069732074686560448201526c207a65726f206164647265737360981b6064820152608401620000ae565b6001600160a01b038316620002655760405162461bcd60e51b815260206004820152602e60248201527f43726f776473616c653a2075736474207072696365206665656420697320746860448201526d65207a65726f206164647265737360901b6064820152608401620000ae565b808211620002dc5760405162461bcd60e51b815260206004820152603e60248201527f43726f776473616c653a206d61782062757961626c6520616d6f756e7420697360448201527f206c6f776572207468616e206d696e2062757961626c6520616d6f756e7400006064820152608401620000ae565b620002e96000336200037c565b60005b600381101562000340578881600381106200030b576200030b620005e2565b602002015160048260038110620003265762000326620005e2565b6002020155806200033781620005f8565b915050620002ec565b506000600a556001600160a01b0395861660e05295851660c0529284166101405290831660805290911660a05261010052610120525062000620565b620003938282620003bf60201b6200148e1760201c565b6000828152600260209081526040909120620003ba9183906200154d62000448821b17901c565b505050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620004445760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45b5050565b60006200045f836001600160a01b03841662000468565b90505b92915050565b6000818152600183016020526040812054620004b15750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000462565b50600062000462565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620004e857600080fd5b919050565b600080600080600080600080610140898b0312156200050b57600080fd5b89601f8a01126200051b57600080fd5b604051606081016001600160401b0381118282101715620005405762000540620004ba565b6040528060608b018c8111156200055657600080fd5b8b5b818110156200057257805183526020928301920162000558565b50829a506200058181620004d0565b99505050506200059460808a01620004d0565b9550620005a460a08a01620004d0565b9450620005b460c08a01620004d0565b9350620005c460e08a01620004d0565b6101008a0151610120909a0151989b979a5095989497939692505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200061957634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a05160c05160e051610100516101205161014051612a09620006b36000396000818161044b015261184801526000818161030001526107cf01526000818161064e0152610a8501526000818161040201528181610e1601526113610152600081816103890152818161099601528181610f410152611329015260006116f8015260006119160152612a096000f3fe6080604052600436106102385760003560e01c8063658297f411610138578063c3a30bcb116100b0578063ca15c8731161007f578063d547741f11610064578063d547741f146106b8578063da49eb9e146106d8578063e63ab1e9146106f857610247565b8063ca15c87314610698578063d0febe4c1461024757610247565b8063c3a30bcb1461061c578063c6b541111461063c578063c73eb6d714610670578063c7fee63e1461068357610247565b80639010d07c116101075780639fa93723116100ec5780639fa93723146105c7578063a217fddf146105e7578063b4939ad5146105fc57610247565b80639010d07c1461055457806391d148541461057457610247565b8063658297f4146104ec5780636f85e62c1461050c5780637c6debc21461051f5780638456cb591461053f57610247565b80632f48ab7d116101cb57806344c63eec1161019a5780635c975abb1161017f5780635c975abb146104a15780635ef8086f146104b95780636055e05a146104cc57610247565b806344c63eec146104395780634a9268351461046d57610247565b80632f48ab7d1461037757806336568abe146103d05780633a8c3338146103f05780633f4ba83a1461042457610247565b80632511b182116102075780632511b182146102ee5780632c4e722e146103225780632e37eef6146103375780632f2ff15d1461035757610247565b806301ffc9a71461024f578063078c91ff14610284578063248a9ca3146102a757806324ba05af146102d857610247565b366102475761024561072c565b005b61024561072c565b34801561025b57600080fd5b5061026f61026a3660046122ae565b61076c565b60405190151581526020015b60405180910390f35b34801561029057600080fd5b506102996107c8565b60405190815260200161027b565b3480156102b357600080fd5b506102996102c23660046122f0565b6000908152600160208190526040909120015490565b3480156102e457600080fd5b50610299600a5481565b3480156102fa57600080fd5b506102997f000000000000000000000000000000000000000000000000000000000000000081565b34801561032e57600080fd5b506102996107f8565b34801561034357600080fd5b506102996103523660046122f0565b610808565b34801561036357600080fd5b50610245610372366004612332565b610822565b34801561038357600080fd5b506103ab7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161027b565b3480156103dc57600080fd5b506102456103eb366004612332565b61084d565b3480156103fc57600080fd5b506103ab7f000000000000000000000000000000000000000000000000000000000000000081565b34801561043057600080fd5b50610245610905565b34801561044557600080fd5b506103ab7f000000000000000000000000000000000000000000000000000000000000000081565b34801561047957600080fd5b506102997f1ae041e7f694fa9f3da1ca6a86d5f03d7d3c664f8ddea494dd6b1fac8e8727f481565b3480156104ad57600080fd5b5060035460ff1661026f565b6102456104c73660046122f0565b61093a565b3480156104d857600080fd5b506102996104e73660046122f0565b610979565b3480156104f857600080fd5b5061029961050736600461235e565b610a4a565b61024561051a366004612453565b610aba565b34801561052b57600080fd5b5061029961053a3660046122f0565b610e6e565b34801561054b57600080fd5b50610245610e82565b34801561056057600080fd5b506103ab61056f366004612488565b610eb4565b34801561058057600080fd5b5061026f61058f366004612332565b600091825260016020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b3480156105d357600080fd5b506102996105e23660046122f0565b610ecc565b3480156105f357600080fd5b50610299600081565b34801561060857600080fd5b506102996106173660046122f0565b610ef9565b34801561062857600080fd5b506102996106373660046122f0565b610f30565b34801561064857600080fd5b506102997f000000000000000000000000000000000000000000000000000000000000000081565b61024561067e3660046124aa565b610fe3565b34801561068f57600080fd5b50610245611393565b3480156106a457600080fd5b506102996106b33660046122f0565b61143d565b3480156106c457600080fd5b506102456106d3366004612332565b611454565b3480156106e457600080fd5b506102996106f33660046122f0565b61147a565b34801561070457600080fd5b506102997f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b61076a6040518060400160405280600a81526020017f3030303030303030303000000000000000000000000000000000000000000000815250610aba565b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f0000000000000000000000000000000000000000000000000000000014806107c257506107c28261156f565b92915050565b60006107f37f000000000000000000000000000000000000000000000000000000000000000061147a565b905090565b6000610802611606565b54919050565b6004816003811061081857600080fd5b6002020154905081565b6000828152600160208190526040909120015461083e81611626565b6108488383611630565b505050565b73ffffffffffffffffffffffffffffffffffffffff811633146108f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6109018282611652565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61092f81611626565b610937611674565b50565b610937816040518060400160405280600a81526020017f3030303030303030303000000000000000000000000000000000000000000000815250610fe3565b6000806109846116f1565b9050600061099184610e6e565b9050817f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2391906124f1565b610a2e90600a612663565b610a389083612672565b610a4291906126af565b949350505050565b600080610a55611606565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600182016020526040902054909150610aa97f000000000000000000000000000000000000000000000000000000000000000061147a565b610ab391906126ea565b9392505050565b610ac261171c565b610aca61178f565b34336000829003610b37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f43726f776473616c653a20776569416d6f756e7420697320300000000000000060448201526064016108ee565b8251600a14610bee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f43726f776473616c653a206261642073706f6e736f724b657920666f726d617460448201527f2c2069742073686f756c6420636f6e7461696e2031302063686172616374657260648201527f7300000000000000000000000000000000000000000000000000000000000000608482015260a4016108ee565b6000610bf983610ef9565b9050610c036107c8565b811015610cb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f43726f776473616c653a2073756263656564206d696e696d756d20616d6f756e60448201527f74206f6620746f6b656e2062757961626c6520666f722074686973207068617360648201527f6500000000000000000000000000000000000000000000000000000000000000608482015260a4016108ee565b6000610cc383610a4a565b905081811015610d5757604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f43726f776473616c653a20657863656564206d6178696d756d20616d6f756e7460448201527f206f6620746f6b656e2062757961626c6520666f72207468697320706861736560648201526084016108ee565b81610d60611606565b60010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610daf91906126fd565b909155505060405133907fb8f2b29e0392452f4f12ce67b78124d6a4f8d446d06f2ed206be80bf11984bee90610dea90879086908a9061277e565b60405180910390a2610dfc83836117fc565b60405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169085156108fc029086906000818181858888f19350505050158015610e5f573d6000803e3d6000fd5b50505050506109376001600055565b6000610e786107f8565b6107c290836126af565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610eac81611626565b6109376118a8565b6000828152600260205260408120610ab39083611903565b600080610ed761190f565b90506000610ee484610e6e565b905081610a3882670de0b6b3a7640000612672565b600080610f0461190f565b90506000670de0b6b3a7640000610f1b8386612672565b610f2591906126af565b9050610a428161147a565b600080610f3b6116f1565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fce91906124f1565b610fd990600a612663565b610f1b8386612672565b610feb61171c565b610ff361178f565b33600083900361105f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f43726f776473616c653a20776569416d6f756e7420697320300000000000000060448201526064016108ee565b8151600a14611116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f43726f776473616c653a206261642073706f6e736f724b657920666f726d617460448201527f2c2069742073686f756c6420636f6e7461696e2031302063686172616374657260648201527f7300000000000000000000000000000000000000000000000000000000000000608482015260a4016108ee565b600061112184610f30565b905061112b6107c8565b8110156111e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f43726f776473616c653a2073756263656564206d696e696d756d20616d6f756e60448201527f74206f6620746f6b656e2062757961626c6520666f722074686973207068617360648201527f6500000000000000000000000000000000000000000000000000000000000000608482015260a4016108ee565b60006111eb83610a4a565b90508181101561127f57604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f43726f776473616c653a20657863656564206d6178696d756d20616d6f756e7460448201527f206f6620746f6b656e2062757961626c6520666f72207468697320706861736560648201526084016108ee565b81611288611606565b60010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112d791906126fd565b909155505060405133907fb8f2b29e0392452f4f12ce67b78124d6a4f8d446d06f2ed206be80bf11984bee90611312908890869089906127da565b60405180910390a261132483836117fc565b6113867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16337f00000000000000000000000000000000000000000000000000000000000000008861193a565b5050506109016001600055565b7f1ae041e7f694fa9f3da1ca6a86d5f03d7d3c664f8ddea494dd6b1fac8e8727f46113bd81611626565b6002600a5410611429576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f43726f776473616c653a2063616e6e6f7420657863656564207068617365203360448201526064016108ee565b600a546114379060016126fd565b600a5550565b60008181526002602052604081206107c2906119d5565b6000828152600160208190526040909120015461147081611626565b6108488383611652565b60006114846107f8565b6107c29083612672565b600082815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661090157600082815260016020818152604080842073ffffffffffffffffffffffffffffffffffffffff8616808652925280842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000610ab38373ffffffffffffffffffffffffffffffffffffffff84166119df565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806107c257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146107c2565b60006004600a546003811061161d5761161d61282d565b60020201905090565b6109378133611a2e565b61163a828261148e565b6000828152600260205260409020610848908261154d565b61165c8282611ae8565b60008281526002602052604090206108489082611ba3565b61167c611bc5565b600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60006107f37f0000000000000000000000000000000000000000000000000000000000000000611c31565b600260005403611788576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108ee565b6002600055565b60035460ff161561076a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016108ee565b6040517f2797c6c800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390527f00000000000000000000000000000000000000000000000000000000000000001690632797c6c890604401600060405180830381600087803b15801561188c57600080fd5b505af11580156118a0573d6000803e3d6000fd5b505050505050565b6118b061178f565b600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116c73390565b6000610ab38383611caf565b60006107f37f0000000000000000000000000000000000000000000000000000000000000000611c31565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526119cf908590611cd9565b50505050565b60006107c2825490565b6000818152600183016020526040812054611a26575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107c2565b5060006107c2565b600082815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661090157611a6e81611de8565b611a79836020611e07565b604051602001611a8a92919061285c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526108ee916004016128dd565b600082815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561090157600082815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610ab38373ffffffffffffffffffffffffffffffffffffffff841661204a565b60035460ff1661076a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108ee565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca3919061290a565b50919695505050505050565b6000826000018281548110611cc657611cc661282d565b9060005260206000200154905092915050565b6000611d3b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661213d9092919063ffffffff16565b9050805160001480611d5c575080806020019051810190611d5c919061295a565b610848576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016108ee565b60606107c273ffffffffffffffffffffffffffffffffffffffff831660145b60606000611e16836002612672565b611e219060026126fd565b67ffffffffffffffff811115611e3957611e39612379565b6040519080825280601f01601f191660200182016040528015611e63576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611e9a57611e9a61282d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611efd57611efd61282d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611f39846002612672565b611f449060016126fd565b90505b6001811115611fe1577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611f8557611f8561282d565b1a60f81b828281518110611f9b57611f9b61282d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611fda8161297c565b9050611f47565b508315610ab3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108ee565b6000818152600183016020526040812054801561213357600061206e6001836126ea565b8554909150600090612082906001906126ea565b90508181146120e75760008660000182815481106120a2576120a261282d565b90600052602060002001549050808760000184815481106120c5576120c561282d565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806120f8576120f86129b1565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107c2565b60009150506107c2565b6060610a428484600085856000808673ffffffffffffffffffffffffffffffffffffffff16858760405161217191906129e0565b60006040518083038185875af1925050503d80600081146121ae576040519150601f19603f3d011682016040523d82523d6000602084013e6121b3565b606091505b50915091506121c4878383876121cf565b979650505050505050565b6060831561226557825160000361225e5773ffffffffffffffffffffffffffffffffffffffff85163b61225e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108ee565b5081610a42565b610a42838381511561227a5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ee91906128dd565b6000602082840312156122c057600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610ab357600080fd5b60006020828403121561230257600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461232d57600080fd5b919050565b6000806040838503121561234557600080fd5b8235915061235560208401612309565b90509250929050565b60006020828403121561237057600080fd5b610ab382612309565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126123b957600080fd5b813567ffffffffffffffff808211156123d4576123d4612379565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561241a5761241a612379565b8160405283815286602085880101111561243357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561246557600080fd5b813567ffffffffffffffff81111561247c57600080fd5b610a42848285016123a8565b6000806040838503121561249b57600080fd5b50508035926020909101359150565b600080604083850312156124bd57600080fd5b82359150602083013567ffffffffffffffff8111156124db57600080fd5b6124e7858286016123a8565b9150509250929050565b60006020828403121561250357600080fd5b815160ff81168114610ab357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b8085111561259c57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561258257612582612514565b8085161561258f57918102915b93841c9390800290612548565b509250929050565b6000826125b3575060016107c2565b816125c0575060006107c2565b81600181146125d657600281146125e0576125fc565b60019150506107c2565b60ff8411156125f1576125f1612514565b50506001821b6107c2565b5060208310610133831016604e8410600b841016171561261f575081810a6107c2565b6126298383612543565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561265b5761265b612514565b029392505050565b6000610ab360ff8416836125a4565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156126aa576126aa612514565b500290565b6000826126e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b818103818111156107c2576107c2612514565b808201808211156107c2576107c2612514565b60005b8381101561272b578181015183820152602001612713565b50506000910152565b6000815180845261274c816020860160208601612710565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b83815282602082015260806040820152600360808201527f455448000000000000000000000000000000000000000000000000000000000060a082015260c0606082015260006127d160c0830184612734565b95945050505050565b83815282602082015260806040820152600460808201527f555344540000000000000000000000000000000000000000000000000000000060a082015260c0606082015260006127d160c0830184612734565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612894816017850160208801612710565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516128d1816028840160208801612710565b01602801949350505050565b602081526000610ab36020830184612734565b805169ffffffffffffffffffff8116811461232d57600080fd5b600080600080600060a0868803121561292257600080fd5b61292b866128f0565b945060208601519350604086015192506060860151915061294e608087016128f0565b90509295509295909350565b60006020828403121561296c57600080fd5b81518015158114610ab357600080fd5b60008161298b5761298b612514565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600082516129f2818460208701612710565b919091019291505056fea164736f6c6343000810000a",
  "deployedBytecode": "0x6080604052600436106102385760003560e01c8063658297f411610138578063c3a30bcb116100b0578063ca15c8731161007f578063d547741f11610064578063d547741f146106b8578063da49eb9e146106d8578063e63ab1e9146106f857610247565b8063ca15c87314610698578063d0febe4c1461024757610247565b8063c3a30bcb1461061c578063c6b541111461063c578063c73eb6d714610670578063c7fee63e1461068357610247565b80639010d07c116101075780639fa93723116100ec5780639fa93723146105c7578063a217fddf146105e7578063b4939ad5146105fc57610247565b80639010d07c1461055457806391d148541461057457610247565b8063658297f4146104ec5780636f85e62c1461050c5780637c6debc21461051f5780638456cb591461053f57610247565b80632f48ab7d116101cb57806344c63eec1161019a5780635c975abb1161017f5780635c975abb146104a15780635ef8086f146104b95780636055e05a146104cc57610247565b806344c63eec146104395780634a9268351461046d57610247565b80632f48ab7d1461037757806336568abe146103d05780633a8c3338146103f05780633f4ba83a1461042457610247565b80632511b182116102075780632511b182146102ee5780632c4e722e146103225780632e37eef6146103375780632f2ff15d1461035757610247565b806301ffc9a71461024f578063078c91ff14610284578063248a9ca3146102a757806324ba05af146102d857610247565b366102475761024561072c565b005b61024561072c565b34801561025b57600080fd5b5061026f61026a3660046122ae565b61076c565b60405190151581526020015b60405180910390f35b34801561029057600080fd5b506102996107c8565b60405190815260200161027b565b3480156102b357600080fd5b506102996102c23660046122f0565b6000908152600160208190526040909120015490565b3480156102e457600080fd5b50610299600a5481565b3480156102fa57600080fd5b506102997f000000000000000000000000000000000000000000000000000000000000000081565b34801561032e57600080fd5b506102996107f8565b34801561034357600080fd5b506102996103523660046122f0565b610808565b34801561036357600080fd5b50610245610372366004612332565b610822565b34801561038357600080fd5b506103ab7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161027b565b3480156103dc57600080fd5b506102456103eb366004612332565b61084d565b3480156103fc57600080fd5b506103ab7f000000000000000000000000000000000000000000000000000000000000000081565b34801561043057600080fd5b50610245610905565b34801561044557600080fd5b506103ab7f000000000000000000000000000000000000000000000000000000000000000081565b34801561047957600080fd5b506102997f1ae041e7f694fa9f3da1ca6a86d5f03d7d3c664f8ddea494dd6b1fac8e8727f481565b3480156104ad57600080fd5b5060035460ff1661026f565b6102456104c73660046122f0565b61093a565b3480156104d857600080fd5b506102996104e73660046122f0565b610979565b3480156104f857600080fd5b5061029961050736600461235e565b610a4a565b61024561051a366004612453565b610aba565b34801561052b57600080fd5b5061029961053a3660046122f0565b610e6e565b34801561054b57600080fd5b50610245610e82565b34801561056057600080fd5b506103ab61056f366004612488565b610eb4565b34801561058057600080fd5b5061026f61058f366004612332565b600091825260016020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b3480156105d357600080fd5b506102996105e23660046122f0565b610ecc565b3480156105f357600080fd5b50610299600081565b34801561060857600080fd5b506102996106173660046122f0565b610ef9565b34801561062857600080fd5b506102996106373660046122f0565b610f30565b34801561064857600080fd5b506102997f000000000000000000000000000000000000000000000000000000000000000081565b61024561067e3660046124aa565b610fe3565b34801561068f57600080fd5b50610245611393565b3480156106a457600080fd5b506102996106b33660046122f0565b61143d565b3480156106c457600080fd5b506102456106d3366004612332565b611454565b3480156106e457600080fd5b506102996106f33660046122f0565b61147a565b34801561070457600080fd5b506102997f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b61076a6040518060400160405280600a81526020017f3030303030303030303000000000000000000000000000000000000000000000815250610aba565b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f0000000000000000000000000000000000000000000000000000000014806107c257506107c28261156f565b92915050565b60006107f37f000000000000000000000000000000000000000000000000000000000000000061147a565b905090565b6000610802611606565b54919050565b6004816003811061081857600080fd5b6002020154905081565b6000828152600160208190526040909120015461083e81611626565b6108488383611630565b505050565b73ffffffffffffffffffffffffffffffffffffffff811633146108f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6109018282611652565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61092f81611626565b610937611674565b50565b610937816040518060400160405280600a81526020017f3030303030303030303000000000000000000000000000000000000000000000815250610fe3565b6000806109846116f1565b9050600061099184610e6e565b9050817f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2391906124f1565b610a2e90600a612663565b610a389083612672565b610a4291906126af565b949350505050565b600080610a55611606565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600182016020526040902054909150610aa97f000000000000000000000000000000000000000000000000000000000000000061147a565b610ab391906126ea565b9392505050565b610ac261171c565b610aca61178f565b34336000829003610b37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f43726f776473616c653a20776569416d6f756e7420697320300000000000000060448201526064016108ee565b8251600a14610bee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f43726f776473616c653a206261642073706f6e736f724b657920666f726d617460448201527f2c2069742073686f756c6420636f6e7461696e2031302063686172616374657260648201527f7300000000000000000000000000000000000000000000000000000000000000608482015260a4016108ee565b6000610bf983610ef9565b9050610c036107c8565b811015610cb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f43726f776473616c653a2073756263656564206d696e696d756d20616d6f756e60448201527f74206f6620746f6b656e2062757961626c6520666f722074686973207068617360648201527f6500000000000000000000000000000000000000000000000000000000000000608482015260a4016108ee565b6000610cc383610a4a565b905081811015610d5757604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f43726f776473616c653a20657863656564206d6178696d756d20616d6f756e7460448201527f206f6620746f6b656e2062757961626c6520666f72207468697320706861736560648201526084016108ee565b81610d60611606565b60010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610daf91906126fd565b909155505060405133907fb8f2b29e0392452f4f12ce67b78124d6a4f8d446d06f2ed206be80bf11984bee90610dea90879086908a9061277e565b60405180910390a2610dfc83836117fc565b60405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169085156108fc029086906000818181858888f19350505050158015610e5f573d6000803e3d6000fd5b50505050506109376001600055565b6000610e786107f8565b6107c290836126af565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610eac81611626565b6109376118a8565b6000828152600260205260408120610ab39083611903565b600080610ed761190f565b90506000610ee484610e6e565b905081610a3882670de0b6b3a7640000612672565b600080610f0461190f565b90506000670de0b6b3a7640000610f1b8386612672565b610f2591906126af565b9050610a428161147a565b600080610f3b6116f1565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fce91906124f1565b610fd990600a612663565b610f1b8386612672565b610feb61171c565b610ff361178f565b33600083900361105f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f43726f776473616c653a20776569416d6f756e7420697320300000000000000060448201526064016108ee565b8151600a14611116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f43726f776473616c653a206261642073706f6e736f724b657920666f726d617460448201527f2c2069742073686f756c6420636f6e7461696e2031302063686172616374657260648201527f7300000000000000000000000000000000000000000000000000000000000000608482015260a4016108ee565b600061112184610f30565b905061112b6107c8565b8110156111e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f43726f776473616c653a2073756263656564206d696e696d756d20616d6f756e60448201527f74206f6620746f6b656e2062757961626c6520666f722074686973207068617360648201527f6500000000000000000000000000000000000000000000000000000000000000608482015260a4016108ee565b60006111eb83610a4a565b90508181101561127f57604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f43726f776473616c653a20657863656564206d6178696d756d20616d6f756e7460448201527f206f6620746f6b656e2062757961626c6520666f72207468697320706861736560648201526084016108ee565b81611288611606565b60010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112d791906126fd565b909155505060405133907fb8f2b29e0392452f4f12ce67b78124d6a4f8d446d06f2ed206be80bf11984bee90611312908890869089906127da565b60405180910390a261132483836117fc565b6113867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16337f00000000000000000000000000000000000000000000000000000000000000008861193a565b5050506109016001600055565b7f1ae041e7f694fa9f3da1ca6a86d5f03d7d3c664f8ddea494dd6b1fac8e8727f46113bd81611626565b6002600a5410611429576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f43726f776473616c653a2063616e6e6f7420657863656564207068617365203360448201526064016108ee565b600a546114379060016126fd565b600a5550565b60008181526002602052604081206107c2906119d5565b6000828152600160208190526040909120015461147081611626565b6108488383611652565b60006114846107f8565b6107c29083612672565b600082815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661090157600082815260016020818152604080842073ffffffffffffffffffffffffffffffffffffffff8616808652925280842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000610ab38373ffffffffffffffffffffffffffffffffffffffff84166119df565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806107c257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146107c2565b60006004600a546003811061161d5761161d61282d565b60020201905090565b6109378133611a2e565b61163a828261148e565b6000828152600260205260409020610848908261154d565b61165c8282611ae8565b60008281526002602052604090206108489082611ba3565b61167c611bc5565b600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60006107f37f0000000000000000000000000000000000000000000000000000000000000000611c31565b600260005403611788576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108ee565b6002600055565b60035460ff161561076a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016108ee565b6040517f2797c6c800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390527f00000000000000000000000000000000000000000000000000000000000000001690632797c6c890604401600060405180830381600087803b15801561188c57600080fd5b505af11580156118a0573d6000803e3d6000fd5b505050505050565b6118b061178f565b600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116c73390565b6000610ab38383611caf565b60006107f37f0000000000000000000000000000000000000000000000000000000000000000611c31565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526119cf908590611cd9565b50505050565b60006107c2825490565b6000818152600183016020526040812054611a26575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107c2565b5060006107c2565b600082815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661090157611a6e81611de8565b611a79836020611e07565b604051602001611a8a92919061285c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526108ee916004016128dd565b600082815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561090157600082815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610ab38373ffffffffffffffffffffffffffffffffffffffff841661204a565b60035460ff1661076a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108ee565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca3919061290a565b50919695505050505050565b6000826000018281548110611cc657611cc661282d565b9060005260206000200154905092915050565b6000611d3b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661213d9092919063ffffffff16565b9050805160001480611d5c575080806020019051810190611d5c919061295a565b610848576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016108ee565b60606107c273ffffffffffffffffffffffffffffffffffffffff831660145b60606000611e16836002612672565b611e219060026126fd565b67ffffffffffffffff811115611e3957611e39612379565b6040519080825280601f01601f191660200182016040528015611e63576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611e9a57611e9a61282d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611efd57611efd61282d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611f39846002612672565b611f449060016126fd565b90505b6001811115611fe1577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611f8557611f8561282d565b1a60f81b828281518110611f9b57611f9b61282d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611fda8161297c565b9050611f47565b508315610ab3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108ee565b6000818152600183016020526040812054801561213357600061206e6001836126ea565b8554909150600090612082906001906126ea565b90508181146120e75760008660000182815481106120a2576120a261282d565b90600052602060002001549050808760000184815481106120c5576120c561282d565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806120f8576120f86129b1565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107c2565b60009150506107c2565b6060610a428484600085856000808673ffffffffffffffffffffffffffffffffffffffff16858760405161217191906129e0565b60006040518083038185875af1925050503d80600081146121ae576040519150601f19603f3d011682016040523d82523d6000602084013e6121b3565b606091505b50915091506121c4878383876121cf565b979650505050505050565b6060831561226557825160000361225e5773ffffffffffffffffffffffffffffffffffffffff85163b61225e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108ee565b5081610a42565b610a42838381511561227a5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ee91906128dd565b6000602082840312156122c057600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610ab357600080fd5b60006020828403121561230257600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461232d57600080fd5b919050565b6000806040838503121561234557600080fd5b8235915061235560208401612309565b90509250929050565b60006020828403121561237057600080fd5b610ab382612309565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126123b957600080fd5b813567ffffffffffffffff808211156123d4576123d4612379565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561241a5761241a612379565b8160405283815286602085880101111561243357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561246557600080fd5b813567ffffffffffffffff81111561247c57600080fd5b610a42848285016123a8565b6000806040838503121561249b57600080fd5b50508035926020909101359150565b600080604083850312156124bd57600080fd5b82359150602083013567ffffffffffffffff8111156124db57600080fd5b6124e7858286016123a8565b9150509250929050565b60006020828403121561250357600080fd5b815160ff81168114610ab357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b8085111561259c57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561258257612582612514565b8085161561258f57918102915b93841c9390800290612548565b509250929050565b6000826125b3575060016107c2565b816125c0575060006107c2565b81600181146125d657600281146125e0576125fc565b60019150506107c2565b60ff8411156125f1576125f1612514565b50506001821b6107c2565b5060208310610133831016604e8410600b841016171561261f575081810a6107c2565b6126298383612543565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561265b5761265b612514565b029392505050565b6000610ab360ff8416836125a4565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156126aa576126aa612514565b500290565b6000826126e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b818103818111156107c2576107c2612514565b808201808211156107c2576107c2612514565b60005b8381101561272b578181015183820152602001612713565b50506000910152565b6000815180845261274c816020860160208601612710565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b83815282602082015260806040820152600360808201527f455448000000000000000000000000000000000000000000000000000000000060a082015260c0606082015260006127d160c0830184612734565b95945050505050565b83815282602082015260806040820152600460808201527f555344540000000000000000000000000000000000000000000000000000000060a082015260c0606082015260006127d160c0830184612734565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612894816017850160208801612710565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516128d1816028840160208801612710565b01602801949350505050565b602081526000610ab36020830184612734565b805169ffffffffffffffffffff8116811461232d57600080fd5b600080600080600060a0868803121561292257600080fd5b61292b866128f0565b945060208601519350604086015192506060860151915061294e608087016128f0565b90509295509295909350565b60006020828403121561296c57600080fd5b81518015158114610ab357600080fd5b60008161298b5761298b612514565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600082516129f2818460208701612710565b919091019291505056fea164736f6c6343000810000a",
  "devdoc": {
    "events": {
      "TokenPurchased(address,uint256,uint256,string,string)": {
        "params": {
          "amount": "amount of tokens purchased",
          "currency": "currency used to process purchase",
          "purchaser": "who paid for the tokens",
          "sponsorKey": "sponsor key (grant advantages on orivium nfts)",
          "value": "weis paid for purchase"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "Orivium Token Crowdsale",
    "version": 1
  },
  "userdoc": {
    "events": {
      "TokenPurchased(address,uint256,uint256,string,string)": {
        "notice": "Event for token purchase logging"
      }
    },
    "kind": "user",
    "methods": {
      "CROWDSALE_ADMIN_ROLE()": {
        "notice": "Role CROWDSALE_ADMIN_ROLE allows to step into next phase"
      },
      "PAUSER_ROLE()": {
        "notice": "Role PAUSER_ROLE allows to pause and unpause crowdsale"
      },
      "buyTokens(string)": {
        "notice": "buy orivium token with ETHThis function has a non-reentrancy guard, so it shouldn't be called by \t\tanother `nonReentrant` function."
      },
      "buyTokensWithUSDT(uint256,string)": {
        "notice": "buy orivium token with USDTThis function has a non-reentrancy guard, so it shouldn't be called by \t\tanother `nonReentrant` function."
      },
      "fundsCollector()": {
        "notice": "funds collector wallet address"
      },
      "getBuyableAmount(address)": {
        "notice": "get remaining buyable amount for given addres on current phase"
      },
      "getETHPriceFor(uint256)": {
        "notice": "get ETH price for given wei amount in ORI"
      },
      "getMinimumBuyableAmount()": {
        "notice": "get minimal amount to buy"
      },
      "getORIAmountForETH(uint256)": {
        "notice": "get ORI amount for given ETH wei amount"
      },
      "getORIAmountForUSD(uint256)": {
        "notice": "get ORI amount for given USD wei amount"
      },
      "getORIAmountForUSDT(uint256)": {
        "notice": "get ORI amount for given USDT wei amount"
      },
      "getUSDPriceFor(uint256)": {
        "notice": "get ETH price for given wei amount in USD"
      },
      "getUSDTPriceFor(uint256)": {
        "notice": "get ETH price for given wei amount in USDT"
      },
      "maxBuyableAmount()": {
        "notice": "maximum buyable amount by wallet by phase"
      },
      "minBuyableAmount()": {
        "notice": "minimum buyable amount by wallet by phase"
      },
      "pause()": {
        "notice": "pause crowdsale"
      },
      "phaseIndex()": {
        "notice": "Index of the current phase"
      },
      "phases(uint256)": {
        "notice": "array containing information about crowdsale phases"
      },
      "rate()": {
        "notice": "get current USD/ORI conversion rate"
      },
      "unpause()": {
        "notice": "unpause crowdsale"
      },
      "updateRate()": {
        "notice": "step into next phase"
      },
      "usdt()": {
        "notice": "usdt token address"
      },
      "vesting()": {
        "notice": "orivium token vesting contract address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 966,
        "contract": "contracts/sales/CrowdsaleL1.sol:CrowdsaleL1",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 333,
        "contract": "contracts/sales/CrowdsaleL1.sol:CrowdsaleL1",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)328_storage)"
      },
      {
        "astId": 643,
        "contract": "contracts/sales/CrowdsaleL1.sol:CrowdsaleL1",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)5674_storage)"
      },
      {
        "astId": 865,
        "contract": "contracts/sales/CrowdsaleL1.sol:CrowdsaleL1",
        "label": "_paused",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 6038,
        "contract": "contracts/sales/CrowdsaleL1.sol:CrowdsaleL1",
        "label": "phases",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Phase)6032_storage)3_storage"
      },
      {
        "astId": 6041,
        "contract": "contracts/sales/CrowdsaleL1.sol:CrowdsaleL1",
        "label": "phaseIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Phase)6032_storage)3_storage": {
        "base": "t_struct(Phase)6032_storage",
        "encoding": "inplace",
        "label": "struct CrowdsaleL1.Phase[3]",
        "numberOfBytes": "192"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)5674_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)5674_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)328_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)328_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)5674_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5673,
            "contract": "contracts/sales/CrowdsaleL1.sol:CrowdsaleL1",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5359_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Phase)6032_storage": {
        "encoding": "inplace",
        "label": "struct CrowdsaleL1.Phase",
        "members": [
          {
            "astId": 6026,
            "contract": "contracts/sales/CrowdsaleL1.sol:CrowdsaleL1",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6031,
            "contract": "contracts/sales/CrowdsaleL1.sol:CrowdsaleL1",
            "label": "boughtAmounts",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)328_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 325,
            "contract": "contracts/sales/CrowdsaleL1.sol:CrowdsaleL1",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 327,
            "contract": "contracts/sales/CrowdsaleL1.sol:CrowdsaleL1",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)5359_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5354,
            "contract": "contracts/sales/CrowdsaleL1.sol:CrowdsaleL1",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5358,
            "contract": "contracts/sales/CrowdsaleL1.sol:CrowdsaleL1",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}